//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Vleko.Result;
using Tomori.Epartner.Core.Helper;
using Tomori.Epartner.Core.Request;
//using Tomori.Epartner.Core.Log.Command;
using Microsoft.EntityFrameworkCore;

namespace Tomori.Epartner.Core.Identity.User.Command
{

    #region Request
    public class AddUserRoleMapping : Profile
    {
        public AddUserRoleMapping()
        {
            CreateMap<AddUserRoleRequest, UserRoleRequest>().ReverseMap();
        }
    }
    public class AddUserRoleRequest : UserRoleRequest, IMapRequest<Tomori.Epartner.Data.Model.UserRole, AddUserRoleRequest>, IRequest<StatusResponse>
    {
        [Required]
        public TokenUserObject Token { get; set; }
        public void Mapping(IMappingExpression<AddUserRoleRequest, Tomori.Epartner.Data.Model.UserRole> map)
        {
            //use this for mapping
            //map.ForMember(d => d.EF_COLUMN, opt => opt.MapFrom(s => s.Object));
        }
    }
    #endregion

    internal class AddUserRoleHandler : IRequestHandler<AddUserRoleRequest, StatusResponse>
    {
        private readonly ILogger _logger;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public AddUserRoleHandler(
            ILogger<AddUserRoleHandler> logger,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mediator = mediator;
            _context = context;
        }
        public async Task<StatusResponse> Handle(AddUserRoleRequest request, CancellationToken cancellationToken)
        {
            StatusResponse result = new StatusResponse();
            try
            {

                var item = await _context.Entity<Data.Model.UserRole>().Where(d => d.IdUser == request.IdUser).ToListAsync();
                if (item != null && item.Count > 0)
                    _context.Delete(item);

                if (request.IdRoles.Count > 0)
                {
                    var add = request.IdRoles.Select(d => new Data.Model.UserRole()
                    {
                        CreateBy = request.Token.Username,
                        CreateDate = DateTime.Now,
                        Id = Guid.NewGuid(),
                        IdUser = request.IdUser,
                        IdRole = d
                    }).ToList();

                    _context.Add(add);
                }

                var save = await _context.Commit();
                if (save.Success)
                {
                    //_ = Task.Run(() => _mediator.Send(new AddChangeLogRequest() { IdUser = request.Token.Id, ChangeLog = save.log }));
                    result.OK();
                }
                else
                    result.BadRequest(save.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Add UserRole", request);
                result.Error("Failed Add UserRole", ex.Message);
            }
            return result;
        }
    }
}

