//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Vleko.Result;
using Tomori.Epartner.Core.Helper;
using Tomori.Epartner.Core.Request;
//using Tomori.Epartner.Core.Log.Command;
using Microsoft.EntityFrameworkCore;
using Tomori.Epartner.Core.Attributes;
using Microsoft.Extensions.Options;
using Tomori.Epartner.Core.Config.Query;

namespace Tomori.Epartner.Core.Identity.User.Command
{

    #region Request
    public class RegisterUserMapping : Profile
    {
        public RegisterUserMapping()
        {
            CreateMap<RegisterUserRequest, AddUserRequest>().ReverseMap();
        }
    }
    public class RegisterUserRequest : AddUserRequest, IRequest<StatusResponse>
    {
        [Required]
        public TokenUserObject Token { get; set; }
    }
    #endregion

    internal class RegisterUserHandler : IRequestHandler<RegisterUserRequest, StatusResponse>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IGeneralHelper _helper;
        private readonly IMediator _mediator;
        private readonly ApplicationConfig _config;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public RegisterUserHandler(
            ILogger<RegisterUserHandler> logger,
            IMapper mapper,
            IGeneralHelper helper,
            IMediator mediator,
            IOptions<ApplicationConfig> config,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _helper = helper;
            _mediator = mediator;
            _config = config.Value;
            _context = context;
        }
        public async Task<StatusResponse> Handle(RegisterUserRequest request, CancellationToken cancellationToken)
        {
            StatusResponse result = new StatusResponse();
            try
            {
                if (await _context.Entity<Tomori.Epartner.Data.Model.User>()
                        .AnyAsync(d => d.Username.Trim().ToLower() == request.Username.Trim().ToLower()))
                {
                    result.BadRequest("Username has already registered!");
                    return result;
                }
                var config = await _mediator.Send(new GetSettingConfigRequest());
                string _hash_default_password = _helper.PasswordEncrypt(config.Data.DefaultPassword);
                var data = new Tomori.Epartner.Data.Model.User()
                {
                    AccessFailedCount = 0,
                    Active = true,
                    CreateBy = request.Token.Username,
                    CreateDate = DateTime.Now,
                    Username = request.Username,
                    Password = _hash_default_password,
                    LastChangePassword = DateTime.Now,
                    Fullname = request.Fullname,
                    Mail = request.Mail,
                    Id = Guid.NewGuid(),
                    PhoneNumber = request.PhoneNumber,
                    IsLockout = false,
                    ExpiredPassword = config.Data.PasswordExpiredDays > 0 ? DateTime.Now.AddDays(config.Data.PasswordExpiredDays) : null,
                    ExpiredUser = config.Data.UserExpiredDays > 0 ? DateTime.Now.AddDays(config.Data.UserExpiredDays) : null,
                };
                var add = await _context.AddSave(data);
                if (add.Success)
                {
                    ////_ = Task.Run(() => _mediator.Send(new AddChangeLogRequest() { IdUser = request.Token.Id, ChangeLog = add.log }));
                    result.OK();
                }
                else
                    result.BadRequest(add.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Add User", request);
                result.Error("Failed Add User", ex.Message);
            }
            return result;
        }
    }
}

