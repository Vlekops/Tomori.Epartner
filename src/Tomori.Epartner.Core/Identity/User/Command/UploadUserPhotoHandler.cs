//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Vleko.Result;
using Tomori.Epartner.Core.Helper;
using Tomori.Epartner.Core.Request;
//using Tomori.Epartner.Core.Log.Command;
using Microsoft.Extensions.Caching.Memory;
using Tomori.Epartner.Core.Attributes;
using Tomori.Epartner.Core.Repository.Command;
using System.Drawing;

namespace Tomori.Epartner.Core.Identity.User.Command
{

    #region Request
    public class UploadUserPhotoMapping : Profile
    {
        public UploadUserPhotoMapping()
        {
            CreateMap<UploadUserPhotoRequest, FileObject>().ReverseMap();
        }
    }
    public class UploadUserPhotoRequest : FileObject, IRequest<StatusResponse>
    {
        [Required]
        public Guid IdUser { get; set; }
        [Required]
        public TokenUserObject Token { get; set; }
    }
    #endregion

    internal class UploadUserPhotoHandler : IRequestHandler<UploadUserPhotoRequest, StatusResponse>
    {
        private const string MODUL = "USER_PHOTO";
        private readonly ILogger _logger;
        private readonly IMemoryCache _cache;
        private readonly IMediator _mediator;
        private readonly IGeneralHelper _helper;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public UploadUserPhotoHandler(
            ILogger<UploadUserPhotoHandler> logger,
            IMemoryCache cache,
            IMediator mediator,
            IGeneralHelper helper,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _cache = cache;
            _mediator = mediator;
            _helper = helper;
            _context = context;
        }
        public async Task<StatusResponse> Handle(UploadUserPhotoRequest request, CancellationToken cancellationToken)
        {
            StatusResponse result = new StatusResponse();
            try
            {
                if (!_helper.IsImage(request.Filename))
                {
                    result.BadRequest($"File is not image format!");
                    return result;
                }
                var resize = _helper.ResizeImage(Convert.FromBase64String(request.Base64), 300, 300);
                if(!resize.Succeeded)
                {
                    result.BadRequest($"Failed Resize Image {resize.Message}");
                    return resize;
                }
                var upload = await _mediator.Send(new UploadRepositoryRequest()
                {
                    Code = request.IdUser.ToString(),
                    File = new FileObject()
                    {
                        Base64 = resize.Data,
                        Filename = request.Filename,
                        MimeType = "image/png"
                    },
                    Token = request.Token,
                    Modul = MODUL
                });
                if (upload.Succeeded)
                {
                    _cache.Remove($"{MODUL}_{request.IdUser}");
                    result.OK();
                }
                else
                    result.BadRequest(upload.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Add User Profile", request);
                result.Error("Failed Add User Profile", ex.Message);
            }
            return result;
        }
    }
}

