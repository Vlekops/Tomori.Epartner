//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.ComponentModel.DataAnnotations;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Tomori.Epartner.Data.Model;
using Vleko.Result;
using Tomori.Epartner.Core.Response;
using Microsoft.Extensions.Caching.Memory;
using Tomori.Epartner.Core.Attributes;

namespace Tomori.Epartner.Core.Identity.User.Query
{

    public class GetUserRoleRequest : IRequest<ListResponse<ReferensiStringObject>>
    {
        [Required]
        public Guid IdUser { get; set; }
    }
    internal class GetUserRoleHandler : IRequestHandler<GetUserRoleRequest, ListResponse<ReferensiStringObject>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IMemoryCache _cache;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetUserRoleHandler(
            ILogger<GetUserRoleHandler> logger,
            IMapper mapper,
            IMemoryCache cache,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _cache = cache;
            _context = context;
        }
        public async Task<ListResponse<ReferensiStringObject>> Handle(GetUserRoleRequest request, CancellationToken cancellationToken)
        {
            ListResponse<ReferensiStringObject> result = new ListResponse<ReferensiStringObject>();
            try
            {
                string key = $"{CacheKey.USER_ROLE}_{request.IdUser}";
                if (_cache.TryGetValue(key, out IEnumerable<ReferensiStringObject> data))
                {
                    result.List = data.ToList();
                }
                else
                {
                    var data_list = await _context.Entity<Data.Model.UserRole>().Where(d=>d.IdUser == request.IdUser)
                                    .Select(d=> new ReferensiStringObject()
                                    {
                                        Id = d.IdRole,
                                        Nama = d.IdRoleNavigation.Name
                                    }).ToListAsync();
                    result.List = data_list;
                    var cacheEntryOptions = new MemoryCacheEntryOptions()
                            .SetSlidingExpiration(TimeSpan.FromSeconds(60))
                            .SetAbsoluteExpiration(TimeSpan.FromSeconds(3600))
                            .SetPriority(CacheItemPriority.Normal)
                            .SetSize(1024);

                    _cache.Set(key, result.List, cacheEntryOptions);
                }
                if (result.List.Count() == 0)
                {
                    result.NotFound("User Role Not Found!");
                    return result;
                }
                result.List = result.List.OrderBy(d => d.Id).ToList();

                result.Count = result.List.Count;
                result.Filtered = result.List.Count;
                result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get List UserRole", request.IdUser);
                result.Error("Failed Get List UserRole", ex.Message);
            }
            return result;
        }
    }
}

