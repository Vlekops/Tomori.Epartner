//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Tomori.Epartner.Data.Model;
using Vleko.Result;
using Tomori.Epartner.Core.Response;
using Tomori.Epartner.Core.Helper;
using Microsoft.Extensions.Caching.Memory;
using Tomori.Epartner.Core.Attributes;

namespace Tomori.Epartner.Core.Identity.RolePermission.Query
{
    public class GetRolePermissionListRequest : IRequest<ListResponse<RolePermissionResponse>>
    {
		public string IdRole { get; set; }
		public int? Start { get; set; }
        public int? Length { get; set; }
    }
    internal class GetRolePermissionListHandler : IRequestHandler<GetRolePermissionListRequest, ListResponse<RolePermissionResponse>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
		private readonly IMemoryCache _cache;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetRolePermissionListHandler(
            ILogger<GetRolePermissionListHandler> logger,
            IMapper mapper,
			IMemoryCache cache,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
			_cache = cache;
            _context = context;
        }

        public async Task<ListResponse<RolePermissionResponse>> Handle(GetRolePermissionListRequest request, CancellationToken cancellationToken)
        {
            ListResponse<RolePermissionResponse> result = new ListResponse<RolePermissionResponse>();
            try
            {
                if (_cache.TryGetValue(CacheKey.ROLE_PERMISSION, out IEnumerable<RolePermissionResponse> data))
                {
                    result.List = data.ToList();
                }
                else
                {
                    var data_list = await _context.Entity<Tomori.Epartner.Data.Model.RolePermission>()
                                .Include(d=>d.IdRoleNavigation)
                                .Include(d => d.IdPermissionNavigation)
                                .ThenInclude(d => d.IdPageNavigation).ToListAsync();
                    result.List = _mapper.Map<List<RolePermissionResponse>>(data_list);
                    var cacheEntryOptions = new MemoryCacheEntryOptions()
                               .SetSlidingExpiration(TimeSpan.FromSeconds(60))
                               .SetAbsoluteExpiration(TimeSpan.FromSeconds(3600))
                               .SetPriority(CacheItemPriority.Normal)
                               .SetSize(1024);

                    _cache.Set(CacheKey.ROLE_PERMISSION, result.List, cacheEntryOptions);
                }
                if (result.List.Count() == 0)
                {
                    result.NotFound("Role Permission Not Found!");
                    return result;
                }
				if (!string.IsNullOrWhiteSpace(request.IdRole))
					result.List = result.List.Where(d => d.Role.Id == request.IdRole).ToList();

                result.List = result.List.OrderBy(d => d.CreateDate).ToList();

                result.Count = result.List.Count;
                if (request.Start.HasValue && request.Length.HasValue && request.Length > 0)
                    result.List = result.List.Skip((request.Start.Value - 1) * request.Length.Value).Take(request.Length.Value).ToList();

                result.Filtered = result.List.Count;
                result.OK();

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get List RolePermission", request);
                result.Error("Failed Get List RolePermission", ex.Message);
            }
            return result;
        }

        #region List Utility
		private (Expression<Func<Tomori.Epartner.Data.Model.RolePermission, bool>> where, Expression<Func<Tomori.Epartner.Data.Model.RolePermission, object>> order) ListExpression(string search, string field, bool is_where)
		{
			Expression<Func<Tomori.Epartner.Data.Model.RolePermission, object>> result_order = null;
			Expression<Func<Tomori.Epartner.Data.Model.RolePermission, bool>> result_where = null;
            if (!string.IsNullOrWhiteSpace(search) && !string.IsNullOrWhiteSpace(field))
            {
                field = field.Trim().ToLower();
                search = search.Trim().ToLower();
                switch (field)
                {
					case "id" : 
						if(is_where){
							if (Guid.TryParse(search, out var _Id))
								result_where = (d=>d.Id == _Id);
								else
								result_where = (d=>d.Id == Guid.Empty);
						}
						else
							result_order = (d => d.Id);
					break;
					case "createby" : 
						if(is_where){
							result_where = (d=>d.CreateBy.Trim().ToLower().Contains(search));
						}
						else
							result_order = (d => d.CreateBy);
					break;
					case "createdate" : 
						if(is_where){
							if (DateTime.TryParse(search, out var _CreateDate))
								result_where = (d=>d.CreateDate == _CreateDate);
						}
						else
							result_order = (d => d.CreateDate);
					break;
					case "idpermission" : 
						if(is_where){
							if (Guid.TryParse(search, out var _IdPermission))
								result_where = (d=>d.IdPermission == _IdPermission);
								else
								result_where = (d=>d.IdPermission == Guid.Empty);
						}
						else
							result_order = (d => d.IdPermission);
					break;
					case "idrole" : 
						if(is_where){
							result_where = (d=>d.IdRole.Trim().ToLower().Contains(search));
						}
						else
							result_order = (d => d.IdRole);
					break;

                }
            }
            return (result_where, result_order);
        }
        #endregion
    }
}

