//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Tomori.Epartner.Data.Model;
using Vleko.Result;
using Tomori.Epartner.Core.Response;
using Tomori.Epartner.Core.Helper;
using Microsoft.Extensions.Caching.Memory;
using Tomori.Epartner.Core.Attributes;
using System.Linq;

namespace Tomori.Epartner.Core.Config.Query
{
    public class GetConfigListRequest : IRequest<ListResponse<ConfigResponse>>
    {
        public ConfigCategory? Category { get; set; }
        public int? Start { get; set; }
        public int? Length { get; set; }
    }
    internal class GetConfigListHandler : IRequestHandler<GetConfigListRequest, ListResponse<ConfigResponse>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IMemoryCache _cache;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetConfigListHandler(
            ILogger<GetConfigListHandler> logger,
            IMapper mapper,
            IMemoryCache cache,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _cache = cache;
            _context = context;
        }

        public async Task<ListResponse<ConfigResponse>> Handle(GetConfigListRequest request, CancellationToken cancellationToken)
        {
            ListResponse<ConfigResponse> result = new ListResponse<ConfigResponse>();
            try
            {
                var setting = await getData(ConfigCategory.SETTING);
                var company = await getData(ConfigCategory.COMPANY);
                var email = await getData(ConfigCategory.EMAIL);

                if (setting != null && setting.Count() > 0)
                    result.List.AddRange(setting);
                if (company != null && company.Count() > 0)
                    result.List.AddRange(company);
                if (email != null && email.Count() > 0)
                    result.List.AddRange(email);

                if (result.List.Count() == 0)
                {
                    result.NotFound("Config Not Found!");
                    return result;
                }

                if (request.Category.HasValue)
                    result.List = result.List.Where(d => d.Category == request.Category).ToList();

                result.List = result.List.OrderBy(d => d.CreateDate).ToList();

                result.Count = result.List.Count;
                if (request.Start.HasValue && request.Length.HasValue && request.Length > 0)
                    result.List = result.List.Skip((request.Start.Value - 1) * request.Length.Value).Take(request.Length.Value).ToList();

                result.Filtered = result.List.Count;
                result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get List Config", request);
                result.Error("Failed Get List Config", ex.Message);
            }
            return result;
        }

        private async Task<List<ConfigResponse>> getData(ConfigCategory category)
        {
            List<ConfigResponse> result = new List<ConfigResponse>();
            string key = $"{CacheKey.CONFIG}_{category.ToString()}";
            if (_cache.TryGetValue(key, out IEnumerable<ConfigResponse> data))
            {
                result = data.ToList();
            }
            else
            {
                var data_list = await _context.Entity<Data.Model.Config>().Where(d=>d.Category == category.ToString()).ToListAsync();
                result = _mapper.Map<List<ConfigResponse>>(data_list);
                var cacheEntryOptions = new MemoryCacheEntryOptions()
                        .SetSlidingExpiration(TimeSpan.FromSeconds(60))
                        .SetAbsoluteExpiration(TimeSpan.FromSeconds(3600))
                        .SetPriority(CacheItemPriority.Normal)
                .SetSize(1024);

                _cache.Set(key, result, cacheEntryOptions);
            }
            return result;
        }

    }
}

