//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.ComponentModel.DataAnnotations;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Tomori.Epartner.Data.Model;
using Vleko.Result;
using Tomori.Epartner.Core.Response;
using Tomori.Epartner.Core.Helper;
using Microsoft.Extensions.Options;
using Microsoft.Extensions.Caching.Memory;
using Tomori.Epartner.Core.Attributes;

namespace Tomori.Epartner.Core.Repository.Query
{

    public class GetRepositoryByIdRequest : IRequest<ObjectResponse<FileObject>>
    {
        [Required]
        public Guid Id { get; set; }
    }
    internal class GetRepositoryByIdHandler : IRequestHandler<GetRepositoryByIdRequest, ObjectResponse<FileObject>>
    {
        private readonly ILogger _logger;
        private readonly IMediator _mediator;
        private readonly IGeneralHelper _helper;
        private readonly IMemoryCache _cache;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetRepositoryByIdHandler(
            ILogger<GetRepositoryByIdHandler> logger,
            IGeneralHelper helper,
            IMemoryCache cache,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _cache = cache;
            _helper = helper;
            _mediator = mediator;
            _context = context;
        }
        public async Task<ObjectResponse<FileObject>> Handle(GetRepositoryByIdRequest request, CancellationToken cancellationToken)
        {
            ObjectResponse<FileObject> result = new ObjectResponse<FileObject>();
            try
            {
                string cache_key = $"{CacheKey.REPOSITORY}_{request.Id}";
                Data.Model.Repository item = null;
                if (_cache.TryGetValue(cache_key, out Data.Model.Repository data))
                {
                    item = data;
                }
                else
                {
                    item = await _context.Entity<Tomori.Epartner.Data.Model.Repository>().Where(d => d.Id == request.Id).FirstOrDefaultAsync();
                    if (item == null)
                    {
                        result.NotFound($"Id Repository {request.Id} Tidak Ditemukan");
                        return result;
                    }
                    var cacheEntryOptions = new MemoryCacheEntryOptions()
                            .SetSlidingExpiration(TimeSpan.FromSeconds(60))
                            .SetAbsoluteExpiration(TimeSpan.FromSeconds(3600))
                            .SetPriority(CacheItemPriority.Normal)
                            .SetSize(1024);
                    _cache.Set(cache_key, item, cacheEntryOptions);
                }
                result.Data = new FileObject()
                {
                    Base64 = item.Base64,
                    MimeType = item.MimeType,
                    Filename = item.FileName
                };
                result.OK();

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get Repository", request.Id);
                result.Error("Failed Get Repository", ex.Message);
            }
            return result;
        }
    }
}

