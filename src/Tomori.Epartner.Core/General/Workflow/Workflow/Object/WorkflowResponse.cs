//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using Tomori.Epartner.Core.Helper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using Tomori.Epartner.Data.Model;
using Tomori.Epartner.Core.Attributes;

namespace Tomori.Epartner.Core.Response
{
    public partial class WorkflowResponse: IMapResponse<WorkflowResponse, Tomori.Epartner.Data.Model.Workflow>
    {
		public Guid Id{ get; set; }
		public string CallbackUrl{ get; set; }
		public string Code{ get; set; }
		public string CreateBy{ get; set; }
		public DateTime CreateDate{ get; set; }
		public string DataWorkflow{ get; set; }
		public string Description{ get; set; }
		public string DocumentNo{ get; set; }
		public string EmailRequester{ get; set; }
		public string FullnameRequester{ get; set; }
		public int GroupNo{ get; set; }
		public Guid IdUserRequester{ get; set; }
		public string NavigationUrl{ get; set; }
		public WorkflowEnum StatusCode { get; set; }
		public string StatusDescription{ get; set; }
		public int StepNo{ get; set; }
		public string Subject{ get; set; }
		public string UpdateBy{ get; set; }
		public DateTime? UpdateDate{ get; set; }
		public string WorkflowCode{ get; set; }
        public List<WorkflowAttachmentResponse> Attachments { get; set; } = new List<WorkflowAttachmentResponse>();
        public List<string> NextApprover { get; set; }

        public void Mapping(IMappingExpression<Tomori.Epartner.Data.Model.Workflow, WorkflowResponse> map)
        {
            //use this for mapping
            map.ForMember(d => d.StatusCode, opt => opt.MapFrom(s => (WorkflowEnum)s.StatusCode))
                .ForMember(d => d.Attachments, opt => opt.MapFrom(s => s.WorkflowAttachment))
                .ForMember(d => d.NextApprover, opt => opt.MapFrom(s => s.WorkflowDetail != null ? GetNextApprover(s.StepNo, s.GroupNo, s.WorkflowDetail) : null));

        }

        private List<string> GetNextApprover(int currentStep, int currentGroup, ICollection<Data.Model.WorkflowDetail> details)
        {
            return details.Where(d => d.StepNo > currentStep && d.GroupNo == currentGroup && !d.IsReviewer).Select(d => d.FullName).ToList();
        }
    }
}

