//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Tomori.Epartner.Data.Model;
using Vleko.Result;
using Tomori.Epartner.Core.Response;
using Tomori.Epartner.Core.Helper;
using System.ComponentModel.DataAnnotations;
using Tomori.Epartner.Core.Attributes;

namespace Tomori.Epartner.Core.Workflow.Query
{
    public class GetWorkflowTaskRequest : IRequest<ListResponse<WorkflowTaskResponse>>
    {
		[Required]
		public Guid IdUser { get; set; }
        public string WorkflowCode { get; set; }
		public int Start { get; set; }
		public int Length { get; set; }
    }
    internal class GetWorkflowTaskHandler : IRequestHandler<GetWorkflowTaskRequest, ListResponse<WorkflowTaskResponse>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetWorkflowTaskHandler(
            ILogger<GetWorkflowTaskHandler> logger,
            IMapper mapper,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _context = context;
        }

        public async Task<ListResponse<WorkflowTaskResponse>> Handle(GetWorkflowTaskRequest request, CancellationToken cancellationToken)
        {
            ListResponse<WorkflowTaskResponse> result = new ListResponse<WorkflowTaskResponse>();
            try
            {
				var query = _context.Entity<Tomori.Epartner.Data.Model.Workflow>()
                            .Where(d=>d.WorkflowDetail!=null
                                    && d.WorkflowDetail.Any(z => z.IdUser == request.IdUser && z.StepNo == d.StepNo && z.GroupNo == d.GroupNo) && d.StatusCode == (int)WorkflowEnum.Process)
                            .Include(d=>d.WorkflowDetail).AsQueryable();                

                if (!string.IsNullOrWhiteSpace(request.WorkflowCode))
					query = query.Where(d => d.WorkflowCode == request.WorkflowCode).AsQueryable();

				var query_count = query;
                var data_list = await query.OrderBy(d=>d.CreateDate).Skip((request.Start - 1) * request.Length).Take(request.Length).ToListAsync();

                result.List = _mapper.Map<List<WorkflowTaskResponse>>(data_list);
                result.Filtered = data_list.Count();
                result.Count = await query_count.CountAsync();
                result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get List Task Workflow", request);
                result.Error("Failed Get List Task Workflow", ex.Message);
            }
            return result;
        }
    }
}

