//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Vleko.Result;
using Tomori.Epartner.Core.Helper;
using Tomori.Epartner.Core.Request;
using Tomori.Epartner.Core.Log.Command;
using Microsoft.EntityFrameworkCore;

namespace Tomori.Epartner.Core.WorkflowConfigDetail.Command
{

    #region Request
    public class AddWorkflowConfigDetailMapping: Profile
    {
        public AddWorkflowConfigDetailMapping()
        {
            CreateMap<AddWorkflowConfigDetailRequest, WorkflowConfigDetailRequest>().ReverseMap();
        }
    }
    public class AddWorkflowConfigDetailRequest :WorkflowConfigDetailRequest, IMapRequest<Tomori.Epartner.Data.Model.WorkflowConfigDetail, AddWorkflowConfigDetailRequest>,IRequest<StatusResponse>
    {
        [Required]
        public TokenUserObject Token { get; set; }
        public void Mapping(IMappingExpression<AddWorkflowConfigDetailRequest, Tomori.Epartner.Data.Model.WorkflowConfigDetail> map)
        {
            //use this for mapping
            //map.ForMember(d => d.EF_COLUMN, opt => opt.MapFrom(s => s.Object));
        }
    }
    #endregion

    internal class AddWorkflowConfigDetailHandler : IRequestHandler<AddWorkflowConfigDetailRequest, StatusResponse>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public AddWorkflowConfigDetailHandler(
            ILogger<AddWorkflowConfigDetailHandler> logger,
            IMapper mapper,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _mediator = mediator;
            _context = context;
        }
        public async Task<StatusResponse> Handle(AddWorkflowConfigDetailRequest request, CancellationToken cancellationToken)
        {
            StatusResponse result = new StatusResponse();
            try
            {
                if(await _context.Entity<Data.Model.WorkflowConfigDetail>().AnyAsync(d=>d.IdWorkflowConfig == request.IdWorkflowConfig && d.StepNo == request.StepNo))
                {
                    result.BadRequest($"Step no {request.StepNo} Already Exists!");
                    return result;
                }
                var data = _mapper.Map<Tomori.Epartner.Data.Model.WorkflowConfigDetail>(request);
                data.CreateBy = request.Token.Username;
                data.CreateDate = DateTime.Now;
                var add = await _context.AddSave(data);
                if (add.Success)
                {
                    _ = Task.Run(() => _mediator.Send(new AddChangeLogRequest() { IdUser = request.Token.Id, ChangeLog = add.log }));
                    result.OK();
                }
                else
                    result.BadRequest(add.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Add WorkflowConfigDetail", request);
                result.Error("Failed Add WorkflowConfigDetail", ex.Message);
            }
            return result;
        }
    }
}

