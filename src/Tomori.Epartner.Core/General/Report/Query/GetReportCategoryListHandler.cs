//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Tomori.Epartner.Data.Model;
using Vleko.Result;
using Tomori.Epartner.Core.Response;
using Tomori.Epartner.Core.Helper;
using System.Text.RegularExpressions;
using System.ComponentModel.DataAnnotations;
using System.Runtime.InteropServices;
using Tomori.Epartner.Core.Identity.User.Query;

namespace Tomori.Epartner.Core.Report.Query
{
    public class GetReportCategoryListRequest : IRequest<ListResponse<string>>
    {
        [Required]
        public bool IsAdmin { get; set; }
        [Required]
        public TokenUserObject Token { get; set; }
    }
    internal class GetReportCategoryListHandler : IRequestHandler<GetReportCategoryListRequest, ListResponse<string>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetReportCategoryListHandler(
            ILogger<GetReportCategoryListHandler> logger,
            IMapper mapper,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _mediator = mediator;
            _context = context;
        }

        public async Task<ListResponse<string>> Handle(GetReportCategoryListRequest request, CancellationToken cancellationToken)
        {
            ListResponse<string> result = new ListResponse<string>();
            try
            {
                if(request.IsAdmin)
				    result.List= await _context.Entity<Tomori.Epartner.Data.Model.Report>().GroupBy(d=>d.Modul).Select(d=>d.Key).ToListAsync();
                else
                {
                    var roles = await _mediator.Send(new GetUserRoleRequest() { IdUser = request.Token.Id });
                    if(!roles.Succeeded)
                    {
                        result.BadRequest(roles.Message);
                        return result;
                    }
                    List<string> _role = roles.List.Select(d => d.Id).ToList();
                    result.List = await _context.Entity<Tomori.Epartner.Data.Model.ReportRole>().Where(d => _role.Contains(d.IdRole)).GroupBy(d => d.IdReportNavigation.Modul).Select(d => d.Key).ToListAsync();
                }
                result.Filtered = result.List.Count();
				result.Count = result.Filtered;
				result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get List Category Report", request);
                result.Error("Failed Get List Category Report", ex.Message);
            }
            return result;
        }

        
    }
}

