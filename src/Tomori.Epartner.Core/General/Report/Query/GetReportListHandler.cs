//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Tomori.Epartner.Data.Model;
using Vleko.Result;
using Tomori.Epartner.Core.Response;
using Tomori.Epartner.Core.Helper;
using System.Text.RegularExpressions;
using System.ComponentModel.DataAnnotations;
using Tomori.Epartner.Core.Identity.User.Query;

namespace Tomori.Epartner.Core.Report.Query
{
    public class GetReportListRequest : IRequest<ListResponse<ReportResponse>>
    {
        public string Modul { get; set; }
        public string Search { get; set; }
        public int? Start { get; set; }
        public int? Length { get; set; }
        [Required]
        public TokenUserObject Token { get; set; }
    }
    internal class GetReportListHandler : IRequestHandler<GetReportListRequest, ListResponse<ReportResponse>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetReportListHandler(
            ILogger<GetReportListHandler> logger,
            IMapper mapper,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _mediator = mediator;
            _context = context;
        }

        public async Task<ListResponse<ReportResponse>> Handle(GetReportListRequest request, CancellationToken cancellationToken)
        {
            ListResponse<ReportResponse> result = new ListResponse<ReportResponse>();
            try
            {
                var roles = await _mediator.Send(new GetUserRoleRequest() { IdUser = request.Token.Id });
                if (!roles.Succeeded)
                {
                    result.BadRequest(roles.Message);
                    return result;
                }
                var _role = roles.List.Select(d => d.Id).ToList();
                var query = _context.Entity<Tomori.Epartner.Data.Model.ReportRole>().Where(d => _role.Contains(d.IdRole)).Include(d => d.IdReportNavigation).AsQueryable();
                if (!string.IsNullOrWhiteSpace(request.Modul))
                    query = query.Where(d => request.Modul.Trim().ToLower() == d.IdReportNavigation.Modul.Trim().ToLower()).AsQueryable();
                if (!string.IsNullOrWhiteSpace(request.Search))
                    query = query.Where(d => d.IdReportNavigation.Name.Trim().ToLower().Contains(request.Search.Trim().ToLower())).AsQueryable();


                result.Count = await query.GroupBy(d => d.IdReport).CountAsync();
                result.Filtered = 0;
                if (result.Count > 0)
                {
                    List<Data.Model.Report> data_list = new List<Data.Model.Report>();
                    if (request.Start.HasValue && request.Length.HasValue && request.Length > 0)
                        data_list = await query.GroupBy(d => d.IdReportNavigation).Select(d => d.Key).OrderBy(d => d.CreateDate).Skip((request.Start.Value - 1) * request.Length.Value).Take(request.Length.Value).ToListAsync();
                    else
                        data_list = await query.GroupBy(d => d.IdReportNavigation).Select(d => d.Key).OrderBy(d => d.CreateDate).ToListAsync();

                    var mapper_list = (data_list);
                    result.List = new List<ReportResponse>();
                    foreach (var r in data_list)
                    {
                        List<string> listParam = new List<string>();
                        MatchCollection matchCollection = Regex.Matches(r.Query, @"\[(.*?)\]");
                        foreach (var collection in matchCollection)
                        {
                            listParam.Add(collection.ToString().Replace("[", "").Replace("]",""));
                        }
                        var d = _mapper.Map<ReportResponse>(r);
                        d.Parameter = listParam.Distinct().ToList();
                        result.List.Add(d);
                    }
                    result.Filtered = result.List.Count();
                }
                result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get List Report", request);
                result.Error("Failed Get List Report", ex.Message);
            }
            return result;
        }
    }
}

