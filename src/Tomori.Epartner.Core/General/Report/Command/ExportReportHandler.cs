//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Vleko.Result;
using Tomori.Epartner.Core.Helper;
using Tomori.Epartner.Core.Request;
using Tomori.Epartner.Core.Log.Command;
using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Configuration;
using Tomori.Epartner.Data.Model;
using Tomori.Epartner.Core.Attributes;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Spreadsheet;

namespace Tomori.Epartner.Core.Report.Command
{

    #region Request
    public class ExportReportRequest : IRequest<ObjectResponse<FileObject>>
    {
        [Required]
        public Guid Id { get; set; }
        public Dictionary<string, string> Parameter { get; set; }
    }
    #endregion

    internal class ExportReportHandler : IRequestHandler<ExportReportRequest, ObjectResponse<FileObject>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IGeneralHelper _helper;
        private readonly string _connectionString;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public ExportReportHandler(
            ILogger<ExportReportHandler> logger,
            IMapper mapper,
            IGeneralHelper helper,
            IUnitOfWork<ApplicationDBContext> context,
            IConfiguration configuration
            )
        {
            _connectionString = configuration.GetConnectionString("MainConnection");
            _logger = logger;
            _mapper = mapper;
            _helper = helper;
            _context = context;
        }
        public async Task<ObjectResponse<FileObject>> Handle(ExportReportRequest request, CancellationToken cancellationToken)
        {
            ObjectResponse<FileObject> result = new ObjectResponse<FileObject>();
            try
            {
                var data_report = await _context.Entity<Data.Model.Report>().Where(d => d.Id == request.Id).FirstOrDefaultAsync();
                if (data_report == null)
                {
                    result.NotFound("Id Report tidak ditemukan!");
                    return result;
                }
                string query = data_report.Query;
                string filename = $@"{data_report.Name.Replace(" ", "_")}_report_{DateTime.Now:dd_MM_yyyy}.xlsx";
                if (request.Parameter != null)
                {
                    foreach (KeyValuePair<string, string> item in request.Parameter)
                    {
                        query = query.Replace($"[{item.Key}]", item.Value);
                    }
                }

                using (MemoryStream ms = new MemoryStream())
                {
                    using (SpreadsheetDocument document = SpreadsheetDocument.Create(ms, SpreadsheetDocumentType.Workbook))
                    {
                        #region Init
                        WorkbookPart workbookPart = document.AddWorkbookPart();
                        workbookPart.Workbook = new Workbook();

                        WorksheetPart worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
                        worksheetPart.Worksheet = new Worksheet();

                        #region Style
                        WorkbookStylesPart workbookStylesPart = workbookPart.AddNewPart<WorkbookStylesPart>();
                        workbookStylesPart.Stylesheet = _helper.GenerateStylesheet();
                        workbookStylesPart.Stylesheet.Save();
                        #endregion

                        Sheets sheets = workbookPart.Workbook.AppendChild(new Sheets());
                        Sheet sheet = new Sheet() { Id = workbookPart.GetIdOfPart(worksheetPart), SheetId = 1, Name = "Report" };
                        sheets.Append(sheet);
                        workbookPart.Workbook.Save();
                        SheetData sheetData = worksheetPart.Worksheet.AppendChild(new SheetData());
                        #endregion

                        using (SqlConnection ctx = new SqlConnection(_connectionString))
                        {
                            ctx.Open();
                            var cmd = ctx.CreateCommand();
                            cmd.CommandText = query;

                            var reader = cmd.ExecuteReader();
                            var columns = Enumerable.Range(0, reader.FieldCount).Select(reader.GetName).ToList();
                            columns = columns.Distinct().ToList();

                            #region header
                            Row row = new Row();
                            row = new Row();
                            foreach (var item in columns)
                            {
                                row.Append(_helper.ConstructCell(item.ToString(), CellValues.String, 2));
                            }
                            sheetData.AppendChild(row);
                            #endregion

                            #region Value Body
                            while (reader.Read())
                            {
                                var dictionary = new Dictionary<string, string>();

                                row = new Row();
                                foreach (var column in columns)
                                {
                                    string value = reader[column].ToString().Replace("\u001f", "");
                                    row.Append(_helper.ConstructCell(String.IsNullOrEmpty(value) ? "" : value, CellValues.String, 1));
                                }
                                sheetData.AppendChild(row);
                            }
                            #endregion

                            reader.Close();
                            ctx.Close();
                        }
                        worksheetPart.Worksheet.Save();
                    }
                    var bytes = ms.ToArray();
                    string base64 = Convert.ToBase64String(bytes);
                    result.Data = new FileObject()
                    {
                        Filename = filename,
                        MimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        Base64 = base64
                    };
                    result.OK();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Export Report", request);
                result.Error("Failed Export Report", ex.Message);
            }
            return result;
        }
    }
}

