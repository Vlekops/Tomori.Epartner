//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using Microsoft.EntityFrameworkCore;
using System.ComponentModel.DataAnnotations;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Tomori.Epartner.Data.Model;
using Vleko.Result;
using Tomori.Epartner.Core.Response;
using Tomori.Epartner.Core.Helper;
using Microsoft.Extensions.Options;
using Microsoft.Extensions.Caching.Memory;
using Tomori.Epartner.Core.Attributes;

namespace Tomori.Epartner.Core.DocumentTemplate.Query
{

    public class GetDocumentTemplateRequest : IRequest<ObjectResponse<FileObject>>
    {
        [Required]
        public string Code { get; set; }
    }
    internal class GetDocumentTemplateHandler : IRequestHandler<GetDocumentTemplateRequest, ObjectResponse<FileObject>>
    {
        private readonly ILogger _logger;
        private readonly IMediator _mediator;
        private readonly IGeneralHelper _helper;
        private readonly IMemoryCache _cache;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public GetDocumentTemplateHandler(
            ILogger<GetDocumentTemplateHandler> logger,
            IGeneralHelper helper,
            IMemoryCache cache,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _cache = cache;
            _helper = helper;
            _mediator = mediator;
            _context = context;
        }
        public async Task<ObjectResponse<FileObject>> Handle(GetDocumentTemplateRequest request, CancellationToken cancellationToken)
        {
            ObjectResponse<FileObject> result = new ObjectResponse<FileObject>();
            try
            {
                var item = await _context.Entity<Tomori.Epartner.Data.Model.Repository>().Where(d => d.Modul == CacheKey.DOCUMENT_TEMPLATE && d.Code.Trim().ToLower() == request.Code.Trim().ToLower()).FirstOrDefaultAsync();
                if (item == null)
                {
                    result.NotFound($"Code Document {request.Code} Tidak Ditemukan");
                    return result;
                }
                result.Data = new FileObject()
                {
                    Base64 = item.Base64,
                    MimeType = item.MimeType,
                    Filename = item.FileName
                };
                result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get Document", request.Code);
                result.Error("Failed Get Document", ex.Message);
            }
            return result;
        }
    }
}

