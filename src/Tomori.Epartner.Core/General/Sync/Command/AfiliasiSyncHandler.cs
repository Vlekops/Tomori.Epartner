//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Vleko.Result;
using Tomori.Epartner.Core.Helper;
using Tomori.Epartner.Core.Request;
//using Tomori.Epartner.Core.Log.Command;
using HeyRed.Mime;
using System.Buffers.Text;
using Tomori.Epartner.API.Helper;
using AutoMapper.Features;
using Tomori.Epartner.Data.Model;
using DocumentFormat.OpenXml.Wordprocessing;

namespace Tomori.Epartner.Core.Sync.Command
{

    #region Request
    public class AfiliasiSyncRequest :IRequest<StatusResponse>
    {
        [Required]
        public DateTime CompletedDateForm { get; set; }
    }
    #endregion

    internal class AfiliasiSyncHandler : IRequestHandler<AfiliasiSyncRequest, StatusResponse>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        private readonly IRestAPIHelper _restHelper;
        public AfiliasiSyncHandler(
            ILogger<AfiliasiSyncHandler> logger,
            IMapper mapper,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _mediator = mediator;
            _context = context;
        }
        public async Task<StatusResponse> Handle(AfiliasiSyncRequest request, CancellationToken cancellationToken)
        {
            StatusResponse result = new StatusResponse();
            try
            {
                var data = await _restHelper.GetAfiliasi(request.CompletedDateForm);

                foreach ( var item in data.result )
                {
                    if (await _context.Entity<TrsAfiliasi>().Where(d => d.Id == item.id).AnyAsync())
                    {
                        var dataAfiliasi = await _context.Entity<TrsAfiliasi>().Where(d => d.Id == item.id).FirstOrDefaultAsync();
                        dataAfiliasi.TipeAfiliasi = item.tipeAfiliasi;
                        dataAfiliasi.Deskripsi = item.deskripsi;
                        dataAfiliasi.Share = item.share;
                        dataAfiliasi.Terafiliasi = item.terafiliasi;
                        dataAfiliasi.FileAfiliasiId = item.fileAfiliasiId;
                        dataAfiliasi.UpdateBy = "SYSTEM SYNC";
                        dataAfiliasi.UpdateDate = DateTime.Now;

                        _context.Update(dataAfiliasi);
                    }
                    else {

                        _context.Add(new TrsAfiliasi {
                            Id = item.id,
                            VendorId = item.vendorId,
                            TipeAfiliasi = item.tipeAfiliasi,
                            Deskripsi = item.deskripsi,
                            Share = item.share,
                            Terafiliasi = item.terafiliasi,
                            FileAfiliasiId = item.fileAfiliasiId,
                            CreateBy = "SYSTEM SYNC",
                            CreateDate = DateTime.Now
                        });
                    }
                }

                var save = await _context.Commit();
                if (!save.Success)
                {
                    result.Error("Error sync Data Afiliasi", save.Message);
                }
                else
                {
                    result.OK();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Sync Afiliasi", request);
                result.Error("Failed Sync Afiliasi", ex.Message);
            }
            return result;
        }
    }
}

