//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using {{namespace}}Data;
using Vleko.Result;
using {{namespace}}Core.Log.Command;

namespace {{namespace}}Core.{{name}}.Command
{

    #region Request
    public class Active{{name}}Request : IRequest<StatusResponse>
    {
        [Required]
        public {{primary_key_type}} Id { get; set; }
        [Required]
        public bool Active { get; set; }
        [Required]
        public TokenUserObject Token { get; set; }
    }
    #endregion

    internal class Active{{name}}Handler : IRequestHandler<Active{{name}}Request, StatusResponse>
    {
        private readonly ILogger _logger;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public Active{{name}}Handler(
            ILogger<Active{{name}}Handler> logger,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mediator = mediator;
            _context = context;
        }
        public async Task<StatusResponse> Handle(Active{{name}}Request request, CancellationToken cancellationToken)
        {
            StatusResponse result = new StatusResponse();
            try
            {
                var item = await _context.Entity<{{namespace}}Data.Model.{{model}}>().Where(d => d.{{primary_key_name}} == request.Id).FirstOrDefaultAsync();
                if (item != null)
                {
                    item.Active = request.Active;
                    {{>update_by}}item.{{update_by_name}} = request.Token.Username;{{<update_by}}
                    {{>update_date}}item.{{update_date_name}} = DateTime.Now;{{<update_date}}
                    var update = await _context.UpdateSave(item);
                    if (update.Success)
                    {
                        _ = Task.Run(() => _mediator.Send(new AddChangeLogRequest() { IdUser = request.Token.Id, ChangeLog = update.log }));
                        result.OK();
                    }
                    else
                        result.BadRequest(update.Message);
                    return result;
                }
                else
                    result.NotFound($"Id {{name}} {request.Id} Tidak Ditemukan");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Active {{name}}", request);
                result.Error("Failed Active {{name}}", ex.Message);
            }
            return result;
        }
    }
}
