//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Vleko.Result;
using {{namespace}}Core.{{name}}.Query;
using {{namespace}}Core.Request;
using {{namespace}}Core.{{name}}.Command;

namespace {{namespace}}API.Controllers
{
    public partial class {{name}}Controller : BaseController<{{name}}Controller>
    {
        [HttpGet(template: "get/{id}")]
        public async Task<IActionResult> GetById({{primary_key_type}} id)
        {
            return Wrapper(await _mediator.Send(new Get{{name}}ByIdRequest() { Id = id }), new { id });
        }

        [HttpPost(template: "list")]
        public async Task<IActionResult> List([FromBody] ListRequest request)
        {
            var list_request = _mapper.Map<Get{{name}}ListRequest>(request);
            return Wrapper(await _mediator.Send(list_request), request);
        }

        [HttpPost(template: "add")]
        public async Task<IActionResult> Add([FromBody] {{name}}Request request)
        {
            var add_request = _mapper.Map<Add{{name}}Request>(request);
            add_request.Token = Token.User;
            return Wrapper(await _mediator.Send(add_request), request);
        }

        [HttpPut(template: "edit/{id}")]
        public async Task<IActionResult> Edit({{primary_key_type}} id, [FromBody] {{name}}Request request)
        {
            var edit_request = _mapper.Map<Edit{{name}}Request>(request);
            edit_request.Id = id;
            edit_request.Token = Token.User;
            return Wrapper(await _mediator.Send(edit_request), new { id, request });
        }

        [HttpDelete(template: "delete/{id}")]
        public async Task<IActionResult> Delete({{primary_key_type}} id)
        {
            return Wrapper(await _mediator.Send(new Delete{{name}}Request() { Id = id, Token = Token.User }), new { id });
        }

        {{>master}}
        [HttpPut(template: "active/{id}/{value}")]
        public async Task<IActionResult> Active({{primary_key_type}} id, bool value)
        {
            return Wrapper(await _mediator.Send(new Active{{name}}Request() { Id = id, Active = value, Token = Token.User }), new { id, value });
        }
        {{<master}}
    }
}
