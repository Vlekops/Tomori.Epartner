//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
<<<<<<< HEAD
//     Manual changes to this file will be overwritten if the code is regenerated.
=======
>>>>>>> 5d5d61fd98f85493183e29a5767ce20080f32c00
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using Vleko.DAL.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Tomori.Epartner.Data;
using Vleko.Result;
using Tomori.Epartner.Core.Helper;
using Tomori.Epartner.Core.Request;
<<<<<<< HEAD
=======
using Tomori.Epartner.Core.Log.Command;
>>>>>>> 5d5d61fd98f85493183e29a5767ce20080f32c00

namespace Tomori.Epartner.Core.VendorNeraca.Command
{

    #region Request
    public class EditVendorNeracaMapping: Profile
    {
        public EditVendorNeracaMapping()
        {
            CreateMap<EditVendorNeracaRequest, VendorNeracaRequest>().ReverseMap();
        }
    }
    public class EditVendorNeracaRequest :VendorNeracaRequest, IMapRequest<Tomori.Epartner.Data.Model.VendorNeraca, EditVendorNeracaRequest>,IRequest<StatusResponse>
    {
        [Required]
        public Guid Id { get; set; }
        [Required]
<<<<<<< HEAD
        public string Inputer { get; set; }
=======
        public TokenUserObject Token { get; set; }
>>>>>>> 5d5d61fd98f85493183e29a5767ce20080f32c00
        public void Mapping(IMappingExpression<EditVendorNeracaRequest, Tomori.Epartner.Data.Model.VendorNeraca> map)
        {
            //use this for mapping
            //map.ForMember(d => d.EF_COLUMN, opt => opt.MapFrom(s => s.Object));
        }
    }
    #endregion

    internal class EditVendorNeracaHandler : IRequestHandler<EditVendorNeracaRequest, StatusResponse>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
<<<<<<< HEAD
=======
        private readonly IMediator _mediator;
>>>>>>> 5d5d61fd98f85493183e29a5767ce20080f32c00
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public EditVendorNeracaHandler(
            ILogger<EditVendorNeracaHandler> logger,
            IMapper mapper,
<<<<<<< HEAD
=======
            IMediator mediator,
>>>>>>> 5d5d61fd98f85493183e29a5767ce20080f32c00
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
<<<<<<< HEAD
=======
            _mediator = mediator;
>>>>>>> 5d5d61fd98f85493183e29a5767ce20080f32c00
            _context = context;
        }
        public async Task<StatusResponse> Handle(EditVendorNeracaRequest request, CancellationToken cancellationToken)
        {
            StatusResponse result = new StatusResponse();
            try
            {
                var existingItems = await _context.Entity<Tomori.Epartner.Data.Model.VendorNeraca>().Where(d => d.Id == request.Id).FirstOrDefaultAsync();
                if (existingItems != null)
                {
                    var item = _mapper.Map(request, existingItems);
<<<<<<< HEAD
                    item.UpdateBy = request.Inputer;
                    item.UpdateDate = DateTime.Now;
                    var update = await _context.UpdateSave(item);
                    if (update.Success)
                        result.OK();
=======
                    item.UpdateBy = request.Token.Username;
                    item.UpdateDate = DateTime.Now;
                    var update = await _context.UpdateSave(item);
                    if (update.Success)
                    {
                        _ = Task.Run(() => _mediator.Send(new AddChangeLogRequest() { IdUser = request.Token.Id, ChangeLog = update.log }));
                        result.OK();
                    }
>>>>>>> 5d5d61fd98f85493183e29a5767ce20080f32c00
                    else
                        result.BadRequest(update.Message);

                    return result;
                }
                else
                    result.NotFound($"Id VendorNeraca {request.Id} Tidak Ditemukan");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Edit VendorNeraca", request);
                result.Error("Failed Edit VendorNeraca", ex.Message);
            }
            return result;
        }
    }
}

