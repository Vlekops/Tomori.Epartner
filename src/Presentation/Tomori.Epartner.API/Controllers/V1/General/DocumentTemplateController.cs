//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Vleko.Result;
using Tomori.Epartner.Core.DocumentTemplate.Query;
using Tomori.Epartner.Core.Request;
using Tomori.Epartner.Core.DocumentTemplate.Command;
using Microsoft.AspNetCore.Authorization;

namespace Tomori.Epartner.API.Controllers
{
    public partial class DocumentTemplateController : BaseController<DocumentTemplateController>
    {
        [HttpPost(template: "upload")]
        public async Task<IActionResult> Upload([FromBody] DocumentTemplateRequest request)
        {
            var upload_request = _mapper.Map<UploadDocumentTemplateRequest>(request);
            upload_request.Token = Token.User;
            return Wrapper(await _mediator.Send(upload_request), request);
        }
        [HttpDelete(template: "delete/{id}")]
        public async Task<IActionResult> Delete(Guid id)
        {
            return Wrapper(await _mediator.Send(new DeleteDocumentTemplateRequest() { Id = id, Token = Token.User }), new { id });
        }
        [AllowAnonymous]
        [HttpGet(template: "download/{code}")]
        public async Task<IActionResult> Download(string Code)
        {
            var file = await _mediator.Send(new GetDocumentTemplateByteRequest() { Code = Code});
            if (file.Succeeded)
            {
                return File(file.Data.FIle, file.Data.MimeType, file.Data.Filename);
            }
            else
                return this.StatusCode(file.Code, file.Message);
        }

        [AllowAnonymous]
        [HttpGet(template: "get/{code}")]
        public async Task<IActionResult> Get(string code)
        {
            return Wrapper(await _mediator.Send(new GetDocumentTemplateRequest() { Code = code }), new { code });
        }
        [HttpGet(template: "list")]
        public async Task<IActionResult> List(string search, int? start, int? length)
        {
            return Wrapper(await _mediator.Send(new GetDocumentTemplateListRequest() { Search = search, Start = start, Length = length }), new { search, start, length });
        }
    }
}

