//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Vleko.Result;
using Tomori.Epartner.Core.ChangeConfig.Query;
using Tomori.Epartner.Core.Request;
using Tomori.Epartner.Core.ChangeConfig.Command;

namespace Tomori.Epartner.API.Controllers
{
    public partial class ChangeConfigController : BaseController<ChangeConfigController>
    {
        [HttpGet(template: "modul")]
        public async Task<IActionResult> List()
        {
            return Wrapper(await _mediator.Send(new GetModulChangeConfigRequest()), null);
        }
        [HttpGet(template: "list/{modul}")]
        public async Task<IActionResult> List(string modul, string search, int? start, int? length)
        {
            return Wrapper(await _mediator.Send(new GetChangeConfigListRequest() { Search = search, Modul = modul, Start = start, Length = length }), new { search, modul, start, length });
        }

        [HttpPost(template: "add")]
        public async Task<IActionResult> Add([FromBody] ChangeConfigRequest request)
        {
            var add_request = _mapper.Map<AddChangeConfigRequest>(request);
            add_request.Token = Token.User;
            return Wrapper(await _mediator.Send(add_request), request);
        }

        [HttpPut(template: "edit/{id}")]
        public async Task<IActionResult> Edit(Guid id, [FromBody] ChangeConfigRequest request)
        {
            var edit_request = _mapper.Map<EditChangeConfigRequest>(request);
            edit_request.Id = id;
            edit_request.Token = Token.User;
            return Wrapper(await _mediator.Send(edit_request), new { id, request });
        }

        [HttpDelete(template: "delete/{id}")]
        public async Task<IActionResult> Delete(Guid id)
        {
            return Wrapper(await _mediator.Send(new DeleteChangeConfigRequest() { Id = id, Token = Token.User }), new { id });
        }


        [HttpPut(template: "active/{id}/{value}")]
        public async Task<IActionResult> Active(Guid id, bool value)
        {
            return Wrapper(await _mediator.Send(new ActiveChangeConfigRequest() { Id = id, Active = value, Token = Token.User }), new { id, value });
        }

    }
}

