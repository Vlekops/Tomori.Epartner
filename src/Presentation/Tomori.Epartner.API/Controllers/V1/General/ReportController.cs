//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Vleko.Result;
using Tomori.Epartner.Core.Report.Query;
using Tomori.Epartner.Core.Request;
using Tomori.Epartner.Core.Report.Command;

namespace Tomori.Epartner.API.Controllers
{
    public partial class ReportController : BaseController<ReportController>
    {
        [HttpGet(template: "get/{id}")]
        public async Task<IActionResult> GetById(Guid id)
        {
            return Wrapper(await _mediator.Send(new GetReportByIdRequest() { Id = id }), new { id });
        }
        [HttpGet(template: "category")]
        public async Task<IActionResult> ListCategory(bool is_admin = false)
        {
            return Wrapper(await _mediator.Send(new GetReportCategoryListRequest() { IsAdmin = is_admin, Token = Token.User }), null);
        }

        [HttpGet(template: "list")]
        public async Task<IActionResult> List(string modul, string search, int? start, int? length)
        {
            return Wrapper(await _mediator.Send(new GetReportListRequest()
            {
                Modul = modul,
                Search = search,
                Start = start,
                Length = length,
                Token = Token.User
            }), new { modul, search, start, length });
        }

        [HttpPost(template: "list_detail")]
        public async Task<IActionResult> ListDetail([FromBody] ListRequest request)
        {
            var list_request = _mapper.Map<GetReportListDetailRequest>(request);
            return Wrapper(await _mediator.Send(list_request), request);
        }

        [HttpPost(template: "add")]
        public async Task<IActionResult> Add([FromBody] ReportRequest request)
        {
            var add_request = _mapper.Map<AddReportRequest>(request);
            add_request.Token = Token.User;
            return Wrapper(await _mediator.Send(add_request), request);
        }

        [HttpPut(template: "edit/{id}")]
        public async Task<IActionResult> Edit(Guid id, [FromBody] ReportRequest request)
        {
            var edit_request = _mapper.Map<EditReportRequest>(request);
            edit_request.Id = id;
            edit_request.Token = Token.User;
            return Wrapper(await _mediator.Send(edit_request), new { id, request });
        }

        [HttpDelete(template: "delete/{id}")]
        public async Task<IActionResult> Delete(Guid id)
        {
            return Wrapper(await _mediator.Send(new DeleteReportRequest() { Id = id, Token = Token.User }), new { id });
        }


        [HttpPut(template: "active/{id}/{value}")]
        public async Task<IActionResult> Active(Guid id, bool value)
        {
            return Wrapper(await _mediator.Send(new ActiveReportRequest() { Id = id, Active = value, Token = Token.User }), new { id, value });
        }

        [HttpPost(template: "export")]
        public async Task<IActionResult> Export([FromBody] ExportReportRequest request)
        {
            return Wrapper(await _mediator.Send(request), request);
        }
        [HttpPost(template: "export_csv")]
        public async Task<IActionResult> ExportCSV([FromBody] ExportCsvRequest request)
        {
            return Wrapper(await _mediator.Send(request), request);
        }

        [HttpPost(template: "add_role")]
        public async Task<IActionResult> AddRole([FromBody] ReportRoleRequest request)
        {
            var add_request = _mapper.Map<AddReportRoleRequest>(request);
            add_request.Token = Token.User;
            return Wrapper(await _mediator.Send(add_request), request);
        }
        [HttpGet(template: "list_role/{id_report}/{show_all}")]
        public async Task<IActionResult> ListRole(Guid id_report, bool show_all, int? start, int? length)
        {
            return Wrapper(await _mediator.Send(new GetReportRoleListRequest()
            {
                IdReport = id_report,
                ShowAll = show_all,
                Start = start,
                Length = length,
            }), new { id_report, show_all, start, length });
        }
    }
}

