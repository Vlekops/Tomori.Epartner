//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Vleko.Result;
using Tomori.Epartner.Core.Identity.RolePermission.Query;
using Tomori.Epartner.Core.Request;
using Tomori.Epartner.Core.Identity.RolePermission.Command;

namespace Tomori.Epartner.API.Controllers
{
    public partial class RolePermissionController : BaseController<RolePermissionController>
    {
        [HttpGet(template: "get")]
        public async Task<IActionResult> Get(string id_role, int? start, int? length)
        {
            return Wrapper(await _mediator.Send(new GetRolePermissionListRequest()
            {
                IdRole = id_role,
                Start = start,
                Length = length
            }));
        }

        [HttpPost(template: "add")]
        public async Task<IActionResult> Add([FromBody] RolePermissionRequest request)
        {
            var add_request = _mapper.Map<AddRolePermissionRequest>(request);
            add_request.Token = Token.User;
            return Wrapper(await _mediator.Send(add_request), request);
        }

        [HttpPost(template: "add_range")]
        public async Task<IActionResult> AddRange([FromBody] List<RolePermissionRequest> request)
        {
            return Wrapper(await _mediator.Send(new AddRangeRolePermissionRequest
            {
                Items = request,
                Token = Token.User
            }));
        }

        [HttpPut(template: "edit/{id}")]
        public async Task<IActionResult> Edit(Guid id, [FromBody] RolePermissionRequest request)
        {
            var edit_request = _mapper.Map<EditRolePermissionRequest>(request);
            edit_request.Id = id;
            edit_request.Token = Token.User;
            return Wrapper(await _mediator.Send(edit_request), new { id, request });
        }

        [HttpPost(template: "edit_range")]
        public async Task<IActionResult> EditRange([FromBody] List<RolePermissionRequest> request)
        {
            return Wrapper(await _mediator.Send(new EditRangeRolePermissionRequest
            {
                Items = request,
                Token = Token.User
            }));
        }

        [HttpDelete(template: "delete/{id}")]
        public async Task<IActionResult> Delete(Guid id)
        {
            return Wrapper(await _mediator.Send(new DeleteRolePermissionRequest() { Id = id, Token = Token.User }), new { id });
        }

        [HttpDelete(template: "delete_by_page/{id_role}/{id_page}")]
        public async Task<IActionResult> DeleteByPage(string id_role, Guid id_page)
        {
            return Wrapper(await _mediator.Send(new DeleteRangeRolePermissionByPageRequest
            {
                IdRole = id_role,
                IdPage = id_page,
                Token = Token.User
            }));
        }
    }
}

